{
  "version": 3,
  "sources": ["../bundle-Pu1wQW/checked-fetch.js", "../pages-KkvrO9/bundle-I3dNHM/checked-fetch.js", "../../functions/api/auth/utils.ts", "../../functions/api/admin/auth/login.ts", "../../functions/api/admin/auth/logout.ts", "../../functions/api/admin/auth/me.ts", "../../functions/api/auth/login.ts", "../../functions/api/auth/logout.ts", "../../functions/api/auth/me.ts", "../../functions/api/auth/register.ts", "../../functions/api/admin/auth/utils.ts", "../../functions/api/admin/dining/index.ts", "../../functions/api/admin/events/index.ts", "../../functions/api/admin/members/index.ts", "../../functions/api/admin/tee-times/index.ts", "../../functions/api/admin/tennis-courts/index.ts", "../../functions/api/tee-times/available.ts", "../../functions/api/dining/index.ts", "../../functions/api/events/index.ts", "../../functions/api/guest-passes/index.ts", "../../functions/api/tee-times/index.ts", "../../functions/api/tennis-courts/index.ts", "../pages-KkvrO9/functionsWorker-0.0643311894480092.mjs/functionsRoutes-0.4433907164239037.mjs", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/node_modules/path-to-regexp/src/index.ts", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/pages-template-worker.ts", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../pages-KkvrO9/bundle-I3dNHM/middleware-insertion-facade.js", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../pages-KkvrO9/bundle-I3dNHM/middleware-loader.entry.ts", "../../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-Pu1wQW/middleware-insertion-facade.js", "../../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-Pu1wQW/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\gavin\\OneDrive\\Documents\\Github\\BirchwoodCC\\.wrangler\\tmp\\dev-KwOeZV",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// functions/api/auth/utils.ts\r\nimport { Env, Member } from '../../types';\r\n\r\nexport async function verifyAuth(request: Request, env: Env): Promise<Member | null> {\r\n  try {\r\n    const cookieHeader = request.headers.get('Cookie');\r\n    console.log('Cookie header:', cookieHeader); // Debug log\r\n    \r\n    if (!cookieHeader) {\r\n      console.log('No cookie header found');\r\n      return null;\r\n    }\r\n\r\n    // Extract session token from cookies\r\n    const cookies = parseCookies(cookieHeader);\r\n    const sessionToken = cookies['session'];\r\n    console.log('Session token from cookie:', sessionToken); // Debug log\r\n    \r\n    if (!sessionToken) {\r\n      console.log('No session token found in cookies');\r\n      return null;\r\n    }\r\n\r\n    // Check if it's a JWT token (contains dots)\r\n    if (sessionToken.includes('.')) {\r\n      console.log('Detected JWT token, verifying...');\r\n      return await verifyJWT(sessionToken, env);\r\n    } else {\r\n      console.log('Detected hash token, checking database...');\r\n      // Find active session in database\r\n      const sessionResult = await env.DB.prepare(`\r\n        SELECT ms.*, m.* FROM member_sessions ms\r\n        JOIN members m ON ms.member_id = m.id\r\n        WHERE ms.session_token = ? AND ms.expires_at > CURRENT_TIMESTAMP AND m.is_active = 1\r\n      `).bind(sessionToken).first();\r\n\r\n      if (!sessionResult) {\r\n        console.log('No active session found in database');\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        id: sessionResult.id,\r\n        email: sessionResult.email,\r\n        password_hash: sessionResult.password_hash,\r\n        first_name: sessionResult.first_name,\r\n        last_name: sessionResult.last_name,\r\n        membership_type: sessionResult.membership_type,\r\n        member_id: sessionResult.member_id,\r\n        is_active: sessionResult.is_active,\r\n        phone: sessionResult.phone,\r\n        created_at: sessionResult.created_at,\r\n        updated_at: sessionResult.updated_at,\r\n        last_login: sessionResult.last_login\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error('Auth verification error:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function verifyPassword(plaintext: string, hash: string): Promise<boolean> {\r\n  // For now, we'll use a simple comparison. In production, use bcrypt or similar\r\n  const encoder = new TextEncoder();\r\n  const data = encoder.encode(plaintext);\r\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n  return hashHex === hash;\r\n}\r\n\r\nexport async function hashPassword(password: string): Promise<string> {\r\n  const encoder = new TextEncoder();\r\n  const data = encoder.encode(password);\r\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n}\r\n\r\nexport async function createSessionToken(memberId: number, jwtSecret: string): Promise<string> {\r\n  // Simple token generation - in production use proper JWT\r\n  const tokenData = {\r\n    memberId,\r\n    timestamp: Date.now(),\r\n    random: Math.random()\r\n  };\r\n  \r\n  const encoder = new TextEncoder();\r\n  const data = encoder.encode(JSON.stringify(tokenData) + jwtSecret);\r\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n}\r\n\r\nfunction parseCookies(cookieHeader: string): Record<string, string> {\r\n  const cookies: Record<string, string> = {};\r\n  cookieHeader.split(';').forEach(cookie => {\r\n    const [name, value] = cookie.trim().split('=');\r\n    if (name && value) {\r\n      cookies[name] = decodeURIComponent(value);\r\n    }\r\n  });\r\n  return cookies;\r\n}\r\n\r\nasync function verifyJWT(token: string, env: Env): Promise<Member | null> {\r\n  try {\r\n    console.log('Verifying JWT token:', token.substring(0, 50) + '...');\r\n    \r\n    const [encodedHeader, encodedPayload, signature] = token.split('.');\r\n    if (!encodedHeader || !encodedPayload || !signature) {\r\n      console.log('Invalid JWT format');\r\n      return null;\r\n    }\r\n\r\n    console.log('JWT parts:');\r\n    console.log('  Header:', encodedHeader);\r\n    console.log('  Payload:', encodedPayload);\r\n    console.log('  Signature received:', signature);\r\n\r\n    // Verify signature\r\n    const data = `${encodedHeader}.${encodedPayload}`;\r\n    console.log('Data to sign:', data);\r\n    const expectedSignature = await createJWTSignature(data, env.JWT_SECRET);\r\n    console.log('Expected signature:', expectedSignature);\r\n    \r\n    if (signature !== expectedSignature) {\r\n      console.log('JWT signature verification failed');\r\n      console.log('Signature comparison:');\r\n      console.log('  Received: ', signature);\r\n      console.log('  Expected: ', expectedSignature);\r\n      console.log('  Match: ', signature === expectedSignature);\r\n      return null;\r\n    }    // Decode payload (convert Base64URL to Base64 first)\r\n    const payload = JSON.parse(atob(encodedPayload.replace(/-/g, '+').replace(/_/g, '/')));\r\n    console.log('JWT payload:', payload);\r\n    \r\n    // Check expiration\r\n    if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\r\n      console.log('JWT token expired');\r\n      return null;\r\n    }\r\n\r\n    // Get member from database\r\n    const memberResult = await env.DB.prepare(\r\n      'SELECT * FROM members WHERE id = ? AND is_active = 1'\r\n    ).bind(payload.memberId).first();\r\n\r\n    if (!memberResult) {\r\n      console.log('Member not found or inactive');\r\n      return null;\r\n    }\r\n\r\n    console.log('JWT verification successful for member:', memberResult.id);\r\n    return {\r\n      id: memberResult.id,\r\n      email: memberResult.email,\r\n      password_hash: memberResult.password_hash,\r\n      first_name: memberResult.first_name,\r\n      last_name: memberResult.last_name,\r\n      membership_type: memberResult.membership_type,\r\n      member_id: memberResult.member_id,\r\n      is_active: memberResult.is_active,\r\n      phone: memberResult.phone,\r\n      created_at: memberResult.created_at,\r\n      updated_at: memberResult.updated_at,\r\n      last_login: memberResult.last_login\r\n    };\r\n  } catch (error) {\r\n    console.error('JWT verification error:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function createJWTSignature(data: string, secret: string): Promise<string> {\r\n  const encoder = new TextEncoder();\r\n  const key = await crypto.subtle.importKey(\r\n    'raw',\r\n    encoder.encode(secret),\r\n    { name: 'HMAC', hash: 'SHA-256' },\r\n    false,\r\n    ['sign']\r\n  );\r\n  \r\n  const signature = await crypto.subtle.sign('HMAC', key, encoder.encode(data));\r\n  // Convert to Base64URL (no padding, URL-safe characters)\r\n  return btoa(String.fromCharCode(...new Uint8Array(signature)))\r\n    .replace(/\\+/g, '-')\r\n    .replace(/\\//g, '_')\r\n    .replace(/=+$/, '');\r\n}\r\n", "import { Env, AdminLoginRequest } from '../../../types';\r\nimport { hashPassword, createSessionToken } from '../../auth/utils';\r\n\r\nexport const onRequestPost: PagesFunction<Env> = async (context) => {\r\n  try {\r\n    const request = context.request;\r\n    const { DB, JWT_SECRET } = context.env;\r\n\r\n    const body: AdminLoginRequest = await request.json();\r\n    const { username, password } = body;\r\n\r\n    if (!username || !password) {\r\n      return new Response(JSON.stringify({ error: 'Username and password are required' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Find admin user\r\n    const adminResult = await DB.prepare(\r\n      'SELECT * FROM admin_users WHERE username = ? AND is_active = 1'\r\n    ).bind(username).first();\r\n\r\n    if (!adminResult) {\r\n      return new Response(JSON.stringify({ error: 'Invalid credentials' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // For demo purposes, we'll use simple password checking\r\n    // In production, use proper password hashing\r\n    const hashedPassword = await hashPassword(password);\r\n    if (hashedPassword !== adminResult.password_hash) {\r\n      return new Response(JSON.stringify({ error: 'Invalid credentials' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Create session token\r\n    const sessionToken = await createSessionToken(adminResult.id, JWT_SECRET);\r\n    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\r\n\r\n    // Save session to database\r\n    await DB.prepare(\r\n      'INSERT INTO admin_sessions (admin_id, session_token, expires_at) VALUES (?, ?, ?)'\r\n    ).bind(adminResult.id, sessionToken, expiresAt.toISOString()).run();\r\n\r\n    // Update last login\r\n    await DB.prepare(\r\n      'UPDATE admin_users SET last_login = CURRENT_TIMESTAMP WHERE id = ?'\r\n    ).bind(adminResult.id).run();\r\n\r\n    const adminResponse = {\r\n      id: adminResult.id,\r\n      username: adminResult.username,\r\n      fullName: adminResult.full_name,\r\n      role: adminResult.role\r\n    };    // Set session cookie\r\n    // Note: Remove Secure flag for local development (HTTP)\r\n    const cookieOptions = [\r\n      `admin_session=${sessionToken}`,\r\n      'HttpOnly',\r\n      'SameSite=Lax', // Changed to Lax for better local development compatibility\r\n      `Max-Age=${24 * 60 * 60}`,\r\n      'Path=/'\r\n    ].join('; ');\r\n\r\n    const response = new Response(JSON.stringify({ admin: adminResponse }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n\r\n    response.headers.set('Set-Cookie', cookieOptions);\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Admin login error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n", "import { Env } from '../../../types';\r\n\r\nexport const onRequestPost: PagesFunction<Env> = async (context) => {\r\n  try {\r\n    const request = context.request;\r\n    const { DB } = context.env;\r\n\r\n    const cookieHeader = request.headers.get('Cookie');\r\n    if (!cookieHeader) {\r\n      return new Response(JSON.stringify({ error: 'No session' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Extract session token from cookies\r\n    const cookies = parseCookies(cookieHeader);\r\n    const sessionToken = cookies['admin_session'];\r\n    \r\n    if (!sessionToken) {\r\n      return new Response(JSON.stringify({ error: 'No session' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Delete session from database\r\n    await DB.prepare(\r\n      'DELETE FROM admin_sessions WHERE session_token = ?'\r\n    ).bind(sessionToken).run();\r\n\r\n    // Clear session cookie\r\n    const response = new Response(JSON.stringify({ success: true }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n\r\n    response.headers.set('Set-Cookie', `admin_session=; HttpOnly; Secure; SameSite=Strict; Max-Age=0; Path=/`);\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Admin logout error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nfunction parseCookies(cookieHeader: string): Record<string, string> {\r\n  const cookies: Record<string, string> = {};\r\n  cookieHeader.split(';').forEach(cookie => {\r\n    const [name, value] = cookie.trim().split('=');\r\n    if (name && value) {\r\n      cookies[name] = decodeURIComponent(value);\r\n    }\r\n  });\r\n  return cookies;\r\n}\r\n", "import { Env } from '../../../types';\r\n\r\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\r\n  try {\r\n    const request = context.request;\r\n    const { DB } = context.env;\r\n\r\n    const admin = await verifyAdminAuth(request, DB);\r\n    if (!admin) {\r\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    return new Response(JSON.stringify({ admin }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Admin me error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function verifyAdminAuth(request: Request, DB: D1Database) {\r\n  const cookieHeader = request.headers.get('Cookie');\r\n  if (!cookieHeader) {\r\n    return null;\r\n  }\r\n\r\n  const cookies = parseCookies(cookieHeader);\r\n  const sessionToken = cookies['admin_session'];\r\n  \r\n  if (!sessionToken) {\r\n    return null;\r\n  }\r\n\r\n  // Find active admin session\r\n  const sessionResult = await DB.prepare(`\r\n    SELECT ase.*, au.* FROM admin_sessions ase\r\n    JOIN admin_users au ON ase.admin_id = au.id\r\n    WHERE ase.session_token = ? AND ase.expires_at > CURRENT_TIMESTAMP AND au.is_active = 1\r\n  `).bind(sessionToken).first();\r\n\r\n  if (!sessionResult) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    id: sessionResult.id,\r\n    username: sessionResult.username,\r\n    fullName: sessionResult.full_name,\r\n    role: sessionResult.role\r\n  };\r\n}\r\n\r\nfunction parseCookies(cookieHeader: string): Record<string, string> {\r\n  const cookies: Record<string, string> = {};\r\n  cookieHeader.split(';').forEach(cookie => {\r\n    const [name, value] = cookie.trim().split('=');\r\n    if (name && value) {\r\n      cookies[name] = decodeURIComponent(value);\r\n    }\r\n  });\r\n  return cookies;\r\n}\r\n", "// functions/api/auth/login.ts\r\nimport { Env, Member, LoginRequest, MemberResponse } from '../../types';\r\n\r\nexport const onRequestPost: PagesFunction<Env> = async (context) => {\r\n  try {\r\n    const request = context.request;\r\n    const { DB, JWT_SECRET } = context.env;\r\n\r\n    // Parse request body\r\n    const body: LoginRequest = await request.json();\r\n    const { email, password } = body;\r\n\r\n    if (!email || !password) {\r\n      return new Response(JSON.stringify({ error: 'Email and password are required' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }    // Find member by email\r\n    const memberResult = await DB.prepare(\r\n      'SELECT * FROM members WHERE email = ? AND is_active = 1'\r\n    ).bind(email).first() as Member | null;\r\n\r\n    if (!memberResult) {\r\n      return new Response(JSON.stringify({ error: 'Invalid credentials' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Verify password (you'll need to implement password hashing)\r\n    const isValidPassword = await verifyPassword(password, memberResult.password_hash);\r\n    \r\n    if (!isValidPassword) {\r\n      return new Response(JSON.stringify({ error: 'Invalid credentials' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Create session token\r\n    const sessionToken = await createSessionToken(memberResult.id, JWT_SECRET);\r\n    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days\r\n\r\n    // Save session to database\r\n    await DB.prepare(\r\n      'INSERT INTO member_sessions (member_id, session_token, expires_at) VALUES (?, ?, ?)'\r\n    ).bind(memberResult.id, sessionToken, expiresAt.toISOString()).run();\r\n\r\n    // Update last login\r\n    await DB.prepare(\r\n      'UPDATE members SET last_login = CURRENT_TIMESTAMP WHERE id = ?'\r\n    ).bind(memberResult.id).run();\r\n\r\n    // Return success response with token\r\n    const response = new Response(JSON.stringify({\r\n      success: true,\r\n      member: {\r\n        id: memberResult.id,\r\n        email: memberResult.email,\r\n        firstName: memberResult.first_name,\r\n        lastName: memberResult.last_name,\r\n        membershipType: memberResult.membership_type,\r\n        memberId: memberResult.member_id\r\n      }\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });    // Set HTTP-only cookie with more permissive settings for development\r\n    const cookieOptions = [\r\n      `session=${sessionToken}`,\r\n      'HttpOnly',\r\n      'SameSite=Lax',\r\n      `Max-Age=${7 * 24 * 60 * 60}`,\r\n      'Path=/'\r\n      // Removed Domain and Secure flags for localhost development\r\n    ].join('; ');\r\n    \r\n    console.log('Setting cookie:', cookieOptions); // Debug log\r\n    response.headers.set('Set-Cookie', cookieOptions);\r\n\r\n    return response;\r\n\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function verifyPassword(password: string, hash: string): Promise<boolean> {\r\n  // Simple password verification for demo - in production, use bcrypt or similar\r\n  const encoder = new TextEncoder();\r\n  const data = encoder.encode(password);\r\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n  return hashHex === hash;\r\n}\r\n\r\nasync function createSessionToken(memberId: number, secret: string): Promise<string> {\r\n  const payload = {\r\n    memberId,\r\n    iat: Math.floor(Date.now() / 1000),\r\n    exp: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60) // 7 days\r\n  };\r\n\r\n  // Simple JWT creation - in production, use a proper JWT library\r\n  const header = { alg: 'HS256', typ: 'JWT' };\r\n  // Use Base64URL encoding (no padding, URL-safe)\r\n  const encodedHeader = btoa(JSON.stringify(header))\r\n    .replace(/\\+/g, '-')\r\n    .replace(/\\//g, '_')\r\n    .replace(/=+$/, '');\r\n  const encodedPayload = btoa(JSON.stringify(payload))\r\n    .replace(/\\+/g, '-')\r\n    .replace(/\\//g, '_')\r\n    .replace(/=+$/, '');\r\n  \r\n  const signature = await createSignature(`${encodedHeader}.${encodedPayload}`, secret);\r\n  \r\n  return `${encodedHeader}.${encodedPayload}.${signature}`;\r\n}\r\n\r\nasync function createSignature(data: string, secret: string): Promise<string> {\r\n  const encoder = new TextEncoder();\r\n  const key = await crypto.subtle.importKey(\r\n    'raw',\r\n    encoder.encode(secret),\r\n    { name: 'HMAC', hash: 'SHA-256' },\r\n    false,\r\n    ['sign']\r\n  );\r\n  \r\n  const signature = await crypto.subtle.sign('HMAC', key, encoder.encode(data));\r\n  // Use Base64URL encoding (no padding, URL-safe)\r\n  return btoa(String.fromCharCode(...new Uint8Array(signature)))\r\n    .replace(/\\+/g, '-')\r\n    .replace(/\\//g, '_')\r\n    .replace(/=+$/, '');\r\n}\r\n", "// functions/api/auth/logout.ts\r\nimport { Env } from '../../types';\r\n\r\nexport const onRequestPost: PagesFunction<Env> = async (context) => {\r\n  try {\r\n    const request = context.request;\r\n    const { DB } = context.env;\r\n\r\n    // Get session token from cookie\r\n    const cookieHeader = request.headers.get('Cookie');\r\n    const sessionToken = cookieHeader?.split(';')\r\n      .find(c => c.trim().startsWith('session='))\r\n      ?.split('=')[1];\r\n\r\n    if (sessionToken) {\r\n      // Delete session from database\r\n      await DB.prepare(\r\n        'DELETE FROM member_sessions WHERE session_token = ?'\r\n      ).bind(sessionToken).run();\r\n    }\r\n\r\n    // Clear the session cookie\r\n    const response = new Response(JSON.stringify({ success: true }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });    response.headers.set('Set-Cookie', \r\n      'session=; HttpOnly; SameSite=Lax; Max-Age=0; Path=/'\r\n    );\r\n\r\n    return response;\r\n\r\n  } catch (error) {\r\n    console.error('Logout error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n", "// functions/api/auth/me.ts\r\nimport { Env } from '../../types';\r\nimport { verifyAuth } from './utils';\r\n\r\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\r\n  console.log('=== AUTH ME REQUEST ===');\r\n  console.log('Request headers:', Object.fromEntries(context.request.headers.entries()));\r\n  \r\n  try {\r\n    const member = await verifyAuth(context.request, context.env);\r\n    \r\n    if (!member) {\r\n      console.log('Authentication failed - no member returned');\r\n      return new Response(JSON.stringify({ error: 'Invalid or expired session' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    console.log('Authentication successful for member:', member.id);\r\n    return new Response(JSON.stringify({\r\n      member: {\r\n        id: member.id,\r\n        email: member.email,\r\n        firstName: member.first_name,\r\n        lastName: member.last_name,\r\n        membershipType: member.membership_type,\r\n        memberId: member.member_id\r\n      }\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Auth me error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n", "// functions/api/auth/register.ts\r\nimport { Env, RegisterRequest, MemberResponse } from '../../types';\r\n\r\nexport const onRequestPost: PagesFunction<Env> = async (context) => {\r\n  try {\r\n    const request = context.request;\r\n    const { DB } = context.env;\r\n\r\n    // Parse request body\r\n    const body: RegisterRequest = await request.json();\r\n    const { email, password, firstName, lastName, phone, membershipType } = body;\r\n\r\n    // Validate required fields\r\n    if (!email || !password || !firstName || !lastName || !membershipType) {\r\n      return new Response(JSON.stringify({ \r\n        error: 'Email, password, first name, last name, and membership type are required' \r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Check if email already exists\r\n    const existingMember = await DB.prepare(\r\n      'SELECT id FROM members WHERE email = ?'\r\n    ).bind(email).first();\r\n\r\n    if (existingMember) {\r\n      return new Response(JSON.stringify({ error: 'Email already registered' }), {\r\n        status: 409,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Hash password\r\n    const passwordHash = await hashPassword(password);\r\n    \r\n    // Generate member ID\r\n    const memberId = await generateMemberId(DB);\r\n\r\n    // Create member\r\n    const result = await DB.prepare(\r\n      `INSERT INTO members (email, password_hash, first_name, last_name, membership_type, member_id, phone, is_active) \r\n       VALUES (?, ?, ?, ?, ?, ?, ?, 1)`\r\n    ).bind(email, passwordHash, firstName, lastName, membershipType, memberId, phone || null).run();\r\n\r\n    if (!result.success) {\r\n      return new Response(JSON.stringify({ error: 'Failed to create member' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Create member preferences\r\n    await DB.prepare(\r\n      'INSERT INTO member_preferences (member_id) VALUES (?)'\r\n    ).bind(result.meta.last_row_id).run();\r\n\r\n    const memberResponse: MemberResponse = {\r\n      id: result.meta.last_row_id,\r\n      email,\r\n      firstName,\r\n      lastName,\r\n      membershipType,\r\n      memberId,\r\n      phone\r\n    };\r\n\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      member: memberResponse,\r\n      message: 'Registration successful. Please log in.'\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function hashPassword(password: string): Promise<string> {\r\n  // Simple password hashing for demo - in production, use bcrypt or similar\r\n  const encoder = new TextEncoder();\r\n  const data = encoder.encode(password);\r\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n}\r\n\r\nasync function generateMemberId(DB: D1Database): Promise<string> {\r\n  // Generate a unique member ID\r\n  let memberId: string;\r\n  let attempts = 0;\r\n  \r\n  do {\r\n    const year = new Date().getFullYear();\r\n    const randomNum = Math.floor(Math.random() * 10000).toString().padStart(4, '0');\r\n    memberId = `BW${year}${randomNum}`;\r\n    \r\n    const existing = await DB.prepare(\r\n      'SELECT id FROM members WHERE member_id = ?'\r\n    ).bind(memberId).first();\r\n    \r\n    if (!existing) break;\r\n    \r\n    attempts++;\r\n  } while (attempts < 10);\r\n\r\n  return memberId;\r\n}\r\n", "import { Env } from '../../../types';\r\n\r\ninterface Admin {\r\n  id: number;\r\n  username: string;\r\n  fullName: string;\r\n  email: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  last_login?: string;\r\n}\r\n\r\nexport async function verifyAdminAuth(request: Request, env: Env): Promise<Admin | null> {\r\n  try {\r\n    const cookieHeader = request.headers.get('Cookie');\r\n    \r\n    if (!cookieHeader) {\r\n      return null;\r\n    }\r\n\r\n    // Extract session token from cookies\r\n    const cookies = parseCookies(cookieHeader);\r\n    const sessionToken = cookies['admin_session'];\r\n    \r\n    if (!sessionToken) {\r\n      return null;\r\n    }\r\n\r\n    // Find active admin session in database\r\n    const sessionResult = await env.DB.prepare(`\r\n      SELECT as_table.*, au.* FROM admin_sessions as_table\r\n      JOIN admin_users au ON as_table.admin_id = au.id\r\n      WHERE as_table.session_token = ? AND as_table.expires_at > CURRENT_TIMESTAMP AND au.is_active = 1\r\n    `).bind(sessionToken).first();\r\n\r\n    if (!sessionResult) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      id: sessionResult.id,\r\n      username: sessionResult.username,\r\n      fullName: sessionResult.full_name,\r\n      email: sessionResult.email,\r\n      is_active: sessionResult.is_active,\r\n      created_at: sessionResult.created_at,\r\n      last_login: sessionResult.last_login\r\n    };\r\n  } catch (error) {\r\n    console.error('Admin auth verification error:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction parseCookies(cookieHeader: string): Record<string, string> {\r\n  const cookies: Record<string, string> = {};\r\n  cookieHeader.split(';').forEach(cookie => {\r\n    const [name, value] = cookie.trim().split('=');\r\n    if (name && value) {\r\n      cookies[name] = decodeURIComponent(value);\r\n    }\r\n  });\r\n  return cookies;\r\n}\r\n", "import { Env, DiningReservation } from '../../../types';\r\nimport { verifyAdminAuth } from '../auth/utils.ts';\r\n\r\nexport const onRequest: PagesFunction<Env> = async (context) => {\r\n  const { request, env } = context;\r\n  const method = request.method;\r\n\r\n  try {\r\n    const admin = await verifyAdminAuth(request, env);\r\n    if (!admin) {\r\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }    if (method === 'GET') {\r\n      return handleGetAllReservations(request, env);\r\n    } else if (method === 'POST') {\r\n      return handleCreateReservation(request, env);\r\n    } else if (method === 'PUT') {\r\n      return handleUpdateReservation(request, env);\r\n    } else if (method === 'DELETE') {\r\n      return handleDeleteReservation(request, env);\r\n    }\r\n\r\n    return new Response('Method not allowed', { status: 405 });\r\n  } catch (error) {\r\n    console.error('Admin dining API error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function handleGetAllReservations(request: Request, env: Env) {\r\n  const url = new URL(request.url);\r\n  const startDate = url.searchParams.get('startDate');\r\n  const endDate = url.searchParams.get('endDate');\r\n  \r\n  let query = `\r\n    SELECT \r\n      dr.*,\r\n      m.first_name,\r\n      m.last_name,\r\n      m.email,\r\n      m.phone,\r\n      m.member_id\r\n    FROM dining_reservations dr\r\n    JOIN members m ON dr.member_id = m.id\r\n    WHERE dr.status = 'confirmed'\r\n  `;\r\n  let params: any[] = [];\r\n\r\n  if (startDate && endDate) {\r\n    query += ` AND dr.date BETWEEN ? AND ?`;\r\n    params.push(startDate, endDate);\r\n  }\r\n\r\n  query += ` ORDER BY dr.date ASC, dr.time ASC`;\r\n\r\n  const stmt = env.DB.prepare(query);\r\n  const result = await stmt.bind(...params).all();\r\n\r\n  return new Response(JSON.stringify({ \r\n    reservations: result.results,\r\n    total: result.results?.length || 0\r\n  }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n\r\nasync function handleCreateReservation(request: Request, env: Env) {\r\n  const { memberIds, date, time, party_size, special_requests } = await request.json();\r\n\r\n  if (!memberIds || !Array.isArray(memberIds) || memberIds.length === 0) {\r\n    return new Response(JSON.stringify({ error: 'At least one member ID is required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  if (!date || !time || !party_size) {\r\n    return new Response(JSON.stringify({ error: 'Date, time, and party size are required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Use the first member as the primary member for the reservation\r\n  const primaryMemberId = memberIds[0];\r\n\r\n  const stmt = env.DB.prepare(`\r\n    INSERT INTO dining_reservations (member_id, date, time, party_size, special_requests, status, created_by_admin)\r\n    VALUES (?, ?, ?, ?, ?, 'confirmed', 1)\r\n  `);\r\n\r\n  try {\r\n    const result = await stmt.bind(\r\n      primaryMemberId,\r\n      date,\r\n      time,\r\n      party_size,\r\n      special_requests || null\r\n    ).run();\r\n\r\n    if (result.success) {\r\n      return new Response(JSON.stringify({\r\n        success: true,\r\n        id: result.meta.last_row_id,\r\n        message: 'Dining reservation created successfully'\r\n      }), {\r\n        status: 201,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    } else {\r\n      return new Response(JSON.stringify({ error: 'Failed to create reservation' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating dining reservation:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to create reservation' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleUpdateReservation(request: Request, env: Env) {\r\n  const { id, date, time, party_size, special_requests } = await request.json();\r\n\r\n  if (!id) {\r\n    return new Response(JSON.stringify({ error: 'Reservation ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE dining_reservations \r\n    SET date = ?, time = ?, party_size = ?, special_requests = ?, updated_at = CURRENT_TIMESTAMP\r\n    WHERE id = ?\r\n  `);\r\n\r\n  try {\r\n    await stmt.bind(date, time, party_size, special_requests, id).run();\r\n    return new Response(JSON.stringify({ success: true }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating reservation:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to update reservation' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleDeleteReservation(request: Request, env: Env) {\r\n  const url = new URL(request.url);\r\n  const reservationId = url.searchParams.get('id');\r\n\r\n  if (!reservationId) {\r\n    return new Response(JSON.stringify({ error: 'Reservation ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE dining_reservations \r\n    SET status = 'cancelled', updated_at = CURRENT_TIMESTAMP\r\n    WHERE id = ?\r\n  `);\r\n\r\n  try {\r\n    await stmt.bind(reservationId).run();\r\n    return new Response(JSON.stringify({ success: true }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error cancelling reservation:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to cancel reservation' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n", "import { Env, Event } from '../../../types';\r\nimport { verifyAdminAuth } from '../auth/utils.ts';\r\n\r\nexport const onRequest: PagesFunction<Env> = async (context) => {\r\n  const { request, env } = context;\r\n  const method = request.method;\r\n\r\n  try {\r\n    const admin = await verifyAdminAuth(request, env);\r\n    if (!admin) {\r\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    if (method === 'GET') {\r\n      return handleGetAllEvents(request, env);\r\n    } else if (method === 'POST') {\r\n      return handleCreateEvent(request, env);\r\n    } else if (method === 'PUT') {\r\n      return handleUpdateEvent(request, env);\r\n    } else if (method === 'DELETE') {\r\n      return handleDeleteEvent(request, env);\r\n    }\r\n\r\n    return new Response('Method not allowed', { status: 405 });\r\n  } catch (error) {\r\n    console.error('Admin events API error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function handleGetAllEvents(request: Request, env: Env) {\r\n  const url = new URL(request.url);\r\n  const startDate = url.searchParams.get('startDate');\r\n  const endDate = url.searchParams.get('endDate');\r\n  \r\n  let query = `\r\n    SELECT \r\n      e.*,\r\n      COUNT(er.id) as registered_count\r\n    FROM events e\r\n    LEFT JOIN event_registrations er ON e.id = er.event_id AND er.status = 'registered'\r\n    WHERE e.status = 'active'\r\n  `;\r\n  let params: any[] = [];\r\n\r\n  if (startDate && endDate) {\r\n    query += ` AND e.date BETWEEN ? AND ?`;\r\n    params.push(startDate, endDate);\r\n  }\r\n\r\n  query += ` GROUP BY e.id ORDER BY e.date ASC, e.time ASC`;\r\n\r\n  const stmt = env.DB.prepare(query);\r\n  const result = await stmt.bind(...params).all();\r\n\r\n  return new Response(JSON.stringify({ \r\n    events: result.results,\r\n    total: result.results?.length || 0\r\n  }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n\r\nasync function handleCreateEvent(request: Request, env: Env) {\r\n  const { title, description, date, time, location, max_capacity, price } = await request.json();\r\n\r\n  if (!title || !date || !time || !location) {\r\n    return new Response(JSON.stringify({ error: 'Title, date, time, and location are required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const stmt = env.DB.prepare(`\r\n    INSERT INTO events (title, description, date, time, location, max_attendees, cost, status, created_at, updated_at)\r\n    VALUES (?, ?, ?, ?, ?, ?, ?, 'active', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\r\n  `);\r\n\r\n  try {\r\n    const result = await stmt.bind(title, description, date, time, location, max_capacity || null, price || 0).run();\r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      eventId: result.meta.last_row_id \r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error creating event:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to create event' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleUpdateEvent(request: Request, env: Env) {\r\n  const { id, title, description, date, time, location, max_capacity, price } = await request.json();\r\n\r\n  if (!id) {\r\n    return new Response(JSON.stringify({ error: 'Event ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE events \r\n    SET title = ?, description = ?, date = ?, time = ?, location = ?, max_attendees = ?, cost = ?, updated_at = CURRENT_TIMESTAMP\r\n    WHERE id = ?\r\n  `);\r\n\r\n  try {\r\n    await stmt.bind(title, description, date, time, location, max_capacity || null, price || 0, id).run();\r\n    return new Response(JSON.stringify({ success: true }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating event:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to update event' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleDeleteEvent(request: Request, env: Env) {\r\n  const url = new URL(request.url);\r\n  const eventId = url.searchParams.get('id');\r\n\r\n  if (!eventId) {\r\n    return new Response(JSON.stringify({ error: 'Event ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE events \r\n    SET status = 'cancelled', updated_at = CURRENT_TIMESTAMP\r\n    WHERE id = ?\r\n  `);\r\n\r\n  try {\r\n    await stmt.bind(eventId).run();\r\n    return new Response(JSON.stringify({ success: true }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error cancelling event:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to cancel event' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n", "import { Env } from '../../../types';\r\n\r\nexport const onRequest: PagesFunction<Env> = async (context) => {\r\n  const { request, env } = context;\r\n  const method = request.method;\r\n\r\n  try {\r\n    const admin = await verifyAdminAuth(request, env.DB);\r\n    if (!admin) {\r\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    if (method === 'GET') {\r\n      return handleGetMembers(request, env);\r\n    } else if (method === 'POST') {\r\n      return handleCreateMember(request, env);\r\n    } else if (method === 'PUT') {\r\n      return handleUpdateMember(request, env);\r\n    } else if (method === 'DELETE') {\r\n      return handleDeleteMember(request, env);\r\n    }\r\n\r\n    return new Response('Method not allowed', { status: 405 });\r\n  } catch (error) {\r\n    console.error('Admin members API error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function handleGetMembers(request: Request, env: Env) {\r\n  const url = new URL(request.url);\r\n  const page = parseInt(url.searchParams.get('page') || '1');\r\n  const limit = parseInt(url.searchParams.get('limit') || '25');\r\n  const search = url.searchParams.get('search') || '';\r\n  const offset = (page - 1) * limit;\r\n\r\n  let query = `\r\n    SELECT id, email, first_name, last_name, membership_type, member_id, phone, is_active, created_at, last_login\r\n    FROM members\r\n  `;\r\n  let countQuery = `SELECT COUNT(*) as total FROM members`;\r\n  let params: any[] = [];\r\n\r\n  if (search) {\r\n    const searchCondition = ` WHERE (email LIKE ? OR first_name LIKE ? OR last_name LIKE ? OR member_id LIKE ?)`;\r\n    query += searchCondition;\r\n    countQuery += searchCondition;\r\n    const searchParam = `%${search}%`;\r\n    params = [searchParam, searchParam, searchParam, searchParam];\r\n  }\r\n\r\n  query += ` ORDER BY created_at DESC LIMIT ? OFFSET ?`;\r\n  params.push(limit, offset);\r\n\r\n  const [membersResult, countResult] = await Promise.all([\r\n    env.DB.prepare(query).bind(...params).all(),\r\n    env.DB.prepare(countQuery).bind(...(search ? [params[0], params[1], params[2], params[3]] : [])).first()\r\n  ]);\r\n\r\n  return new Response(JSON.stringify({\r\n    members: membersResult.results,\r\n    total: countResult?.total || 0,\r\n    page,\r\n    limit\r\n  }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n\r\nasync function handleCreateMember(request: Request, env: Env) {\r\n  const body = await request.json();\r\n  const { email, password, firstName, lastName, membershipType, phone } = body;\r\n\r\n  if (!email || !password || !firstName || !lastName || !membershipType) {\r\n    return new Response(JSON.stringify({ error: 'Missing required fields' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Generate member ID\r\n  const memberId = generateMemberId();\r\n  \r\n  // Hash password\r\n  const passwordHash = await hashPassword(password);\r\n\r\n  const stmt = env.DB.prepare(`\r\n    INSERT INTO members (email, password_hash, first_name, last_name, membership_type, member_id, phone)\r\n    VALUES (?, ?, ?, ?, ?, ?, ?)\r\n  `);\r\n\r\n  const result = await stmt.bind(email, passwordHash, firstName, lastName, membershipType, memberId, phone || null).run();\r\n\r\n  if (result.success) {\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      id: result.meta.last_row_id,\r\n      memberId,\r\n      message: 'Member created successfully'\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Failed to create member' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleUpdateMember(request: Request, env: Env) {\r\n  const body = await request.json();\r\n  const { id, email, firstName, lastName, membershipType, phone, isActive } = body;\r\n\r\n  if (!id) {\r\n    return new Response(JSON.stringify({ error: 'Member ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE members \r\n    SET email = ?, first_name = ?, last_name = ?, membership_type = ?, phone = ?, is_active = ?, updated_at = CURRENT_TIMESTAMP\r\n    WHERE id = ?\r\n  `);\r\n\r\n  const result = await stmt.bind(email, firstName, lastName, membershipType, phone, isActive ? 1 : 0, id).run();\r\n\r\n  if (result.success && result.meta.changes > 0) {\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      message: 'Member updated successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Member not found or update failed' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleDeleteMember(request: Request, env: Env) {\r\n  const url = new URL(request.url);\r\n  const memberId = url.searchParams.get('id');\r\n\r\n  if (!memberId) {\r\n    return new Response(JSON.stringify({ error: 'Member ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Soft delete by setting is_active to false\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE members SET is_active = 0, updated_at = CURRENT_TIMESTAMP WHERE id = ?\r\n  `);\r\n\r\n  const result = await stmt.bind(memberId).run();\r\n\r\n  if (result.success && result.meta.changes > 0) {\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      message: 'Member deactivated successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Member not found' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function verifyAdminAuth(request: Request, DB: D1Database) {\r\n  const cookieHeader = request.headers.get('Cookie');\r\n  if (!cookieHeader) return null;\r\n\r\n  const cookies = parseCookies(cookieHeader);\r\n  const sessionToken = cookies['admin_session'];\r\n  if (!sessionToken) return null;\r\n\r\n  const sessionResult = await DB.prepare(`\r\n    SELECT ase.*, au.* FROM admin_sessions ase\r\n    JOIN admin_users au ON ase.admin_id = au.id\r\n    WHERE ase.session_token = ? AND ase.expires_at > CURRENT_TIMESTAMP AND au.is_active = 1\r\n  `).bind(sessionToken).first();\r\n\r\n  return sessionResult ? {\r\n    id: sessionResult.id,\r\n    username: sessionResult.username,\r\n    fullName: sessionResult.full_name,\r\n    role: sessionResult.role\r\n  } : null;\r\n}\r\n\r\nfunction parseCookies(cookieHeader: string): Record<string, string> {\r\n  const cookies: Record<string, string> = {};\r\n  cookieHeader.split(';').forEach(cookie => {\r\n    const [name, value] = cookie.trim().split('=');\r\n    if (name && value) {\r\n      cookies[name] = decodeURIComponent(value);\r\n    }\r\n  });\r\n  return cookies;\r\n}\r\n\r\nasync function hashPassword(password: string): Promise<string> {\r\n  const encoder = new TextEncoder();\r\n  const data = encoder.encode(password);\r\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n}\r\n\r\nfunction generateMemberId(): string {\r\n  const timestamp = Date.now().toString().slice(-6);\r\n  const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\r\n  return `BC${timestamp}${random}`;\r\n}\r\n", "import { Env, TeeTime } from '../../../types';\r\nimport { verifyAdminAuth } from '../auth/utils.ts';\r\n\r\nexport const onRequest: PagesFunction<Env> = async (context) => {\r\n  const { request, env } = context;\r\n  const method = request.method;\r\n  try {\r\n    const admin = await verifyAdminAuth(request, env);\r\n    if (!admin) {\r\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    if (method === 'GET') {\r\n      return handleGetAllTeeTimes(request, env);\r\n    } else if (method === 'POST') {\r\n      return handleCreateTeeTime(request, env);\r\n    } else if (method === 'DELETE') {\r\n      return handleDeleteTeeTime(request, env);\r\n    } else if (method === 'PUT') {\r\n      return handleUpdateTeeTime(request, env);\r\n    }\r\n\r\n    return new Response('Method not allowed', { status: 405 });\r\n  } catch (error) {\r\n    console.error('Admin tee times API error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function handleGetAllTeeTimes(request: Request, env: Env) {\r\n  const url = new URL(request.url);\r\n  const startDate = url.searchParams.get('startDate');\r\n  const endDate = url.searchParams.get('endDate');\r\n  \r\n  let query = `\r\n    SELECT \r\n      ttb.*,\r\n      m.first_name,\r\n      m.last_name,\r\n      m.email,\r\n      m.phone,\r\n      m.member_id as member_id_display\r\n    FROM tee_time_bookings ttb\r\n    JOIN members m ON ttb.member_id = m.id\r\n    WHERE ttb.status = 'active'\r\n  `;\r\n  let params: any[] = [];\r\n\r\n  if (startDate && endDate) {\r\n    query += ` AND ttb.date BETWEEN ? AND ?`;\r\n    params.push(startDate, endDate);\r\n  }\r\n\r\n  query += ` ORDER BY ttb.date ASC, ttb.time ASC`;\r\n\r\n  const stmt = env.DB.prepare(query);\r\n  const result = await stmt.bind(...params).all();\r\n\r\n  // Format the response with proper field mapping\r\n  const formattedTeeTimes = result.results?.map((booking: any) => ({\r\n    id: booking.id,\r\n    member_id: booking.member_id,\r\n    member_id_display: booking.member_id_display,\r\n    date: booking.date,\r\n    time: booking.time,\r\n    course_name: booking.course_name,\r\n    players: booking.players || 1,\r\n    player_names: booking.player_names,\r\n    notes: booking.notes,\r\n    status: booking.status,\r\n    first_name: booking.first_name,\r\n    last_name: booking.last_name,\r\n    email: booking.email,\r\n    phone: booking.phone,\r\n    created_at: booking.created_at,\r\n    updated_at: booking.updated_at,\r\n    allow_additional_players: booking.allow_additional_players\r\n  })) || [];\r\n\r\n  return new Response(JSON.stringify({ \r\n    teeTimes: formattedTeeTimes,\r\n    total: formattedTeeTimes.length\r\n  }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n\r\nasync function handleDeleteTeeTime(request: Request, env: Env) {\r\n  const url = new URL(request.url);\r\n  const bookingId = url.searchParams.get('id');\r\n\r\n  if (!bookingId) {\r\n    return new Response(JSON.stringify({ error: 'Booking ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE tee_time_bookings \r\n    SET status = 'cancelled', updated_at = CURRENT_TIMESTAMP\r\n    WHERE id = ?\r\n  `);  try {\r\n    await stmt.bind(bookingId).run();\r\n    return new Response(JSON.stringify({ success: true }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error cancelling booking:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to cancel booking' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleUpdateTeeTime(request: Request, env: Env) {\r\n  const { id, memberIds, courseId, date, time, notes, players } = await request.json();\r\n  console.log('Admin update request:', { id, memberIds, courseId, date, time, notes, players });\r\n\r\n  if (!id) {\r\n    return new Response(JSON.stringify({ error: 'Booking ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  if (memberIds && Array.isArray(memberIds) && memberIds.length > 1) {\r\n    return new Response(JSON.stringify({ error: 'Please select only one member per booking' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  try {\r\n    // Get the current booking to preserve existing data\r\n    const currentBookingStmt = env.DB.prepare(`\r\n      SELECT * FROM tee_time_bookings WHERE id = ?\r\n    `);\r\n    const currentBooking = await currentBookingStmt.bind(id).first();\r\n\r\n    if (!currentBooking) {\r\n      return new Response(JSON.stringify({ error: 'Booking not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Handle member change\r\n    let memberId = null;\r\n    let finalPlayerNames = currentBooking.player_names;\r\n\r\n    if (memberIds && Array.isArray(memberIds) && memberIds.length > 0) {\r\n      memberId = memberIds[0];\r\n      \r\n      // Get the new member's name\r\n      const memberQuery = env.DB.prepare(`\r\n        SELECT first_name, last_name FROM members WHERE id = ?\r\n      `);\r\n      const memberResult = await memberQuery.bind(memberId).first();\r\n      \r\n      if (memberResult) {\r\n        const memberName = `${memberResult.first_name} ${memberResult.last_name}`;\r\n        const playersCount = players || currentBooking.players;\r\n        \r\n        // Generate player names (member + guests if more than 1 player)\r\n        if (playersCount === 1) {\r\n          finalPlayerNames = memberName;\r\n        } else {\r\n          const guestNames = Array(playersCount - 1).fill(null).map((_, i) => `Guest ${i + 1}`);\r\n          finalPlayerNames = [memberName, ...guestNames].join(', ');\r\n        }\r\n      }\r\n    } else if (players && players !== currentBooking.players) {\r\n      // Player count changed but no member change - update guest names\r\n      const currentPrimary = currentBooking.player_names?.split(',')[0]?.trim() || 'Unknown Member';\r\n      \r\n      if (players === 1) {\r\n        finalPlayerNames = currentPrimary;\r\n      } else {\r\n        const guestNames = Array(players - 1).fill(null).map((_, i) => `Guest ${i + 1}`);\r\n        finalPlayerNames = [currentPrimary, ...guestNames].join(', ');\r\n      }\r\n    }\r\n\r\n    const stmt = env.DB.prepare(`\r\n      UPDATE tee_time_bookings \r\n      SET member_id = COALESCE(?, member_id),\r\n          course_name = COALESCE(?, course_name),\r\n          date = COALESCE(?, date),\r\n          time = COALESCE(?, time),\r\n          players = COALESCE(?, players),\r\n          player_names = COALESCE(?, player_names),\r\n          notes = COALESCE(?, notes),\r\n          updated_at = CURRENT_TIMESTAMP\r\n      WHERE id = ?\r\n    `);\r\n\r\n    const result = await stmt.bind(\r\n      memberId,\r\n      courseId,\r\n      date,\r\n      time,\r\n      players || null,\r\n      finalPlayerNames,\r\n      notes || null,\r\n      id\r\n    ).run();\r\n\r\n    console.log('Update result:', result);\r\n\r\n    if (result.success) {\r\n      return new Response(JSON.stringify({ success: true }), {\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    } else {\r\n      return new Response(JSON.stringify({ error: 'Update failed' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating booking:', error);\r\n    return new Response(JSON.stringify({ error: `Failed to update booking: ${error.message}` }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleCreateTeeTime(request: Request, env: Env) {\r\n  const { memberIds, courseId, date, time, notes, players } = await request.json();\r\n\r\n  if (!memberIds || !Array.isArray(memberIds) || memberIds.length === 0) {\r\n    return new Response(JSON.stringify({ error: 'A member ID is required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  if (memberIds.length > 1) {\r\n    return new Response(JSON.stringify({ error: 'Please select only one member per booking. Create separate bookings for additional members.' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  if (!courseId || !date || !time) {\r\n    return new Response(JSON.stringify({ error: 'Course, date, and time are required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const memberId = memberIds[0];\r\n  const playersCount = players || 1;\r\n\r\n  // Check if this member already has a booking for this slot\r\n  const conflictCheck = env.DB.prepare(`\r\n    SELECT id FROM tee_time_bookings \r\n    WHERE course_name = ? AND date = ? AND time = ? AND member_id = ? AND status = 'active'\r\n  `);\r\n  const existing = await conflictCheck.bind(courseId, date, time, memberId).first();\r\n\r\n  if (existing) {\r\n    return new Response(JSON.stringify({ error: 'This member already has a booking for this time slot' }), {\r\n      status: 409,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Check if adding this booking would exceed the 4-player limit\r\n  const capacityCheck = env.DB.prepare(`\r\n    SELECT SUM(players) as total_players FROM tee_time_bookings \r\n    WHERE course_name = ? AND date = ? AND time = ? AND status = 'active'\r\n  `);\r\n  const capacityResult = await capacityCheck.bind(courseId, date, time).first();\r\n  const currentPlayers = capacityResult?.total_players || 0;\r\n\r\n  if (currentPlayers + playersCount > 4) {\r\n    const remainingSpots = 4 - currentPlayers;\r\n    return new Response(JSON.stringify({ \r\n      error: `This booking would exceed the 4-player limit. Only ${remainingSpots} spot${remainingSpots !== 1 ? 's' : ''} remaining.` \r\n    }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  try {\r\n    // Get member name for the booking\r\n    const memberQuery = env.DB.prepare(`\r\n      SELECT first_name, last_name FROM members WHERE id = ?\r\n    `);\r\n    const memberResult = await memberQuery.bind(memberId).first();\r\n    \r\n    if (!memberResult) {\r\n      return new Response(JSON.stringify({ error: 'Member not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const memberName = `${memberResult.first_name} ${memberResult.last_name}`;\r\n    \r\n    // Generate player names (member + guests if more than 1 player)\r\n    let playerNames = memberName;\r\n    if (playersCount > 1) {\r\n      const guestNames = Array(playersCount - 1).fill(null).map((_, i) => `Guest ${i + 1}`);\r\n      playerNames = [memberName, ...guestNames].join(', ');\r\n    }\r\n\r\n    const stmt = env.DB.prepare(`\r\n      INSERT INTO tee_time_bookings (member_id, course_name, date, time, players, player_names, notes, allow_additional_players)\r\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\r\n    `);\r\n\r\n    const result = await stmt.bind(\r\n      memberId,\r\n      courseId,\r\n      date,\r\n      time,\r\n      playersCount,\r\n      playerNames,\r\n      notes || null,\r\n      1 // Allow additional players by default for admin-created bookings\r\n    ).run();\r\n\r\n    if (result.success) {\r\n      return new Response(JSON.stringify({\r\n        success: true,\r\n        id: result.meta.last_row_id,\r\n        message: 'Tee time booking created successfully'\r\n      }), {\r\n        status: 201,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    } else {\r\n      return new Response(JSON.stringify({ error: 'Failed to create tee time booking' }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating tee time booking:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to create tee time booking' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n", "import { Env, CourtReservation, CourtReservationRequest } from '../../../types';\r\nimport { verifyAdminAuth } from '../auth/utils';\r\n\r\nexport const onRequest: PagesFunction<Env> = async (context) => {\r\n  const { request, env } = context;\r\n  const method = request.method;\r\n\r\n  try {\r\n    if (method === 'GET') {\r\n      return handleGetCourtReservations(request, env);\r\n    } else if (method === 'POST') {\r\n      return handleCreateCourtReservation(request, env);\r\n    } else if (method === 'PUT') {\r\n      return handleUpdateCourtReservation(request, env);\r\n    } else if (method === 'DELETE') {\r\n      return handleDeleteCourtReservation(request, env);\r\n    }\r\n\r\n    return new Response('Method not allowed', { status: 405 });\r\n  } catch (error) {\r\n    console.error('Admin tennis courts API error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function handleGetCourtReservations(request: Request, env: Env) {\r\n  const admin = await verifyAdminAuth(request, env);\r\n  if (!admin) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const url = new URL(request.url);\r\n  const date = url.searchParams.get('date') || new Date().toISOString().split('T')[0];\r\n  const courtType = url.searchParams.get('courtType') || 'tennis';\r\n\r\n  const query = `\r\n    SELECT \r\n      cr.*,\r\n      m.first_name,\r\n      m.last_name,\r\n      m.email,\r\n      m.phone,\r\n      m.member_id as member_id_display\r\n    FROM court_reservations cr\r\n    JOIN members m ON cr.member_id = m.id\r\n    WHERE cr.date = ? AND cr.court_type = ? AND cr.status = 'active'\r\n    ORDER BY cr.court_number ASC, cr.time ASC\r\n  `;\r\n\r\n  const stmt = env.DB.prepare(query);\r\n  const result = await stmt.bind(date, courtType).all();\r\n\r\n  return new Response(JSON.stringify({ reservations: result.results || [] }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n\r\nasync function handleCreateCourtReservation(request: Request, env: Env) {\r\n  const admin = await verifyAdminAuth(request, env);\r\n  if (!admin) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const body = await request.json();\r\n  \r\n  // Validate required fields\r\n  if (!body.member_id || !body.court_type || !body.date || !body.time || !body.duration) {\r\n    return new Response(JSON.stringify({ error: 'Missing required fields' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Validate court type\r\n  if (!['tennis', 'pickleball'].includes(body.court_type)) {\r\n    return new Response(JSON.stringify({ error: 'Invalid court type' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Check if member exists\r\n  const memberCheck = env.DB.prepare('SELECT id FROM members WHERE id = ?');\r\n  const member = await memberCheck.bind(body.member_id).first();\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Member not found' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Auto-assign court if not specified\r\n  let courtNumber = body.court_number;\r\n  if (!courtNumber) {\r\n    const maxCourts = body.court_type === 'tennis' ? 9 : 4;\r\n      // Find available court\r\n    for (let i = 1; i <= maxCourts; i++) {\r\n      const conflictCheck = env.DB.prepare(`\r\n        SELECT id, time, duration FROM court_reservations \r\n        WHERE court_type = ? AND court_number = ? AND date = ? AND status = 'active'\r\n      `);\r\n      \r\n      const existingReservations = await conflictCheck.bind(\r\n        body.court_type, \r\n        i, \r\n        body.date\r\n      ).all();\r\n      \r\n      const newStartTime = new Date(`2000-01-01T${body.time}`);\r\n      const newEndTime = new Date(newStartTime.getTime() + body.duration * 60000);\r\n      \r\n      let hasConflict = false;\r\n      for (const reservation of existingReservations.results || []) {\r\n        const existingStartTime = new Date(`2000-01-01T${reservation.time}`);\r\n        const existingEndTime = new Date(existingStartTime.getTime() + reservation.duration * 60000);\r\n        \r\n        // Check for overlap\r\n        if (newStartTime < existingEndTime && newEndTime > existingStartTime) {\r\n          hasConflict = true;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      if (!hasConflict) {\r\n        courtNumber = i;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (!courtNumber) {\r\n      return new Response(JSON.stringify({ error: 'No courts available at the requested time' }), {\r\n        status: 409,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  } else {    // Check if specified court is available\r\n    const conflictCheck = env.DB.prepare(`\r\n      SELECT id, time, duration FROM court_reservations \r\n      WHERE court_type = ? AND court_number = ? AND date = ? AND status = 'active'\r\n    `);\r\n    \r\n    const existingReservations = await conflictCheck.bind(\r\n      body.court_type, \r\n      courtNumber, \r\n      body.date\r\n    ).all();\r\n    \r\n    const newStartTime = new Date(`2000-01-01T${body.time}`);\r\n    const newEndTime = new Date(newStartTime.getTime() + body.duration * 60000);\r\n    \r\n    for (const reservation of existingReservations.results || []) {\r\n      const existingStartTime = new Date(`2000-01-01T${reservation.time}`);\r\n      const existingEndTime = new Date(existingStartTime.getTime() + reservation.duration * 60000);\r\n      \r\n      // Check for overlap\r\n      if (newStartTime < existingEndTime && newEndTime > existingStartTime) {\r\n        return new Response(JSON.stringify({ error: 'Selected court is not available at the requested time' }), {\r\n          status: 409,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Create the reservation\r\n  const stmt = env.DB.prepare(`\r\n    INSERT INTO court_reservations (member_id, court_type, court_number, date, time, duration, notes, created_by_admin)\r\n    VALUES (?, ?, ?, ?, ?, ?, ?, 1)\r\n  `);\r\n\r\n  const result = await stmt.bind(\r\n    body.member_id,\r\n    body.court_type,\r\n    courtNumber,\r\n    body.date,\r\n    body.time,\r\n    body.duration,\r\n    body.notes || null\r\n  ).run();\r\n\r\n  if (result.success) {\r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      id: result.meta.last_row_id,\r\n      message: 'Court reservation created successfully'\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Failed to create reservation' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleUpdateCourtReservation(request: Request, env: Env) {\r\n  const admin = await verifyAdminAuth(request, env);\r\n  if (!admin) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const body = await request.json();\r\n  \r\n  if (!body.id) {\r\n    return new Response(JSON.stringify({ error: 'Reservation ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Check if reservation exists\r\n  const existingCheck = env.DB.prepare('SELECT id FROM court_reservations WHERE id = ?');\r\n  const existing = await existingCheck.bind(body.id).first();\r\n  if (!existing) {\r\n    return new Response(JSON.stringify({ error: 'Reservation not found' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Update the reservation\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE court_reservations \r\n    SET court_type = ?, court_number = ?, date = ?, time = ?, duration = ?, notes = ?, updated_at = CURRENT_TIMESTAMP\r\n    WHERE id = ?\r\n  `);\r\n\r\n  const result = await stmt.bind(\r\n    body.court_type,\r\n    body.court_number,\r\n    body.date,\r\n    body.time,\r\n    body.duration,\r\n    body.notes || null,\r\n    body.id\r\n  ).run();\r\n\r\n  if (result.success) {\r\n    return new Response(JSON.stringify({ \r\n      success: true,\r\n      message: 'Court reservation updated successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Failed to update reservation' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleDeleteCourtReservation(request: Request, env: Env) {\r\n  const admin = await verifyAdminAuth(request, env);\r\n  if (!admin) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const url = new URL(request.url);\r\n  const reservationId = url.searchParams.get('id');\r\n\r\n  if (!reservationId) {\r\n    return new Response(JSON.stringify({ error: 'Reservation ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Cancel the reservation (soft delete)\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE court_reservations SET status = 'cancelled', updated_at = CURRENT_TIMESTAMP \r\n    WHERE id = ?\r\n  `);\r\n  \r\n  const result = await stmt.bind(reservationId).run();\r\n\r\n  if (result.success) {\r\n    return new Response(JSON.stringify({ \r\n      success: true,\r\n      message: 'Court reservation cancelled successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Failed to cancel reservation' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n", "import { Env, TeeTime } from '../../types';\r\n\r\nexport const onRequest: PagesFunction<Env> = async (context) => {\r\n  const { request, env } = context;\r\n  \r\n  if (request.method !== 'GET') {\r\n    return new Response('Method not allowed', { status: 405 });\r\n  }\r\n  try {\r\n    const url = new URL(request.url);\r\n    const course = url.searchParams.get('course') || url.searchParams.get('courseId');\r\n    const date = url.searchParams.get('date');\r\n\r\n    if (!course || !date) {\r\n      return new Response(JSON.stringify({ error: 'Course and date parameters required' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }    // Get all individual bookings for the specified course and date\r\n    const stmt = env.DB.prepare(`\r\n      SELECT \r\n        ttb.time, \r\n        ttb.players, \r\n        ttb.player_names,\r\n        ttb.allow_additional_players,\r\n        m.first_name,\r\n        m.last_name,\r\n        m.member_id as member_display_id,\r\n        ttb.member_id\r\n      FROM tee_time_bookings ttb\r\n      JOIN members m ON ttb.member_id = m.id\r\n      WHERE ttb.course_name = ? AND ttb.date = ? AND ttb.status = 'active'\r\n      ORDER BY ttb.time ASC, ttb.created_at ASC\r\n    `);\r\n    \r\n    const result = await stmt.bind(course, date).all();\r\n    const allBookings = result.results || [];\r\n    \r\n    // Group bookings by time slot\r\n    const bookingsByTime = allBookings.reduce((acc: any, booking: any) => {\r\n      if (!acc[booking.time]) {\r\n        acc[booking.time] = [];\r\n      }\r\n      acc[booking.time].push(booking);\r\n      return acc;\r\n    }, {});\r\n    \r\n    const bookedTimes = Object.keys(bookingsByTime);// Generate all time slots (every 10 minutes from 7:00 AM to 6:00 PM)\r\n    const allTimes: any[] = [];\r\n    const startHour = 7;\r\n    const endHour = 18;\r\n    const maxPlayers = 4;\r\n    const basePrice = 85;\r\n\r\n    // Course name mapping\r\n    const courseNames = {\r\n      'birches': 'The Birches',\r\n      'woods': 'The Woods', \r\n      'farms': 'The Farms'\r\n    };\r\n\r\n    for (let hour = startHour; hour < endHour; hour++) {\r\n      for (let minute = 0; minute < 60; minute += 10) {\r\n        const timeStr = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\r\n          // Check if this time slot has any bookings\r\n        const timeSlotBookings = bookingsByTime[timeStr];        if (timeSlotBookings) {\r\n          // This time slot has some bookings\r\n          const totalPlayers = timeSlotBookings.reduce((sum: number, booking: any) => sum + (booking.players || 1), 0);\r\n          const remainingSpots = maxPlayers - totalPlayers;\r\n          \r\n          // Check if any booking allows additional players (usually the first one)\r\n          const allowsAdditional = timeSlotBookings.some((booking: any) => booking.allow_additional_players);\r\n          \r\n          // Status logic: if no remaining spots OR additional players not allowed, mark as booked\r\n          let status = 'booked';\r\n          if (remainingSpots > 0 && allowsAdditional) {\r\n            status = 'partial';\r\n          }\r\n          \r\n          // Get all player names from all bookings\r\n          const allPlayerNames = timeSlotBookings\r\n            .map((booking: any) => booking.player_names)\r\n            .filter((names: string) => names)\r\n            .join(', ');\r\n          \r\n          // Use the first booking's member info as the primary booker for display\r\n          const primaryBooking = timeSlotBookings[0];\r\n          \r\n          allTimes.push({\r\n            id: `${course}-${date}-${timeStr}`,\r\n            courseId: course,\r\n            courseName: courseNames[course as keyof typeof courseNames] || course,\r\n            date: date,\r\n            time: timeStr,\r\n            players: totalPlayers,\r\n            maxPlayers: maxPlayers,\r\n            price: basePrice,\r\n            status: status,\r\n            availableSpots: allowsAdditional ? remainingSpots : 0,\r\n            bookedBy: {\r\n              firstName: primaryBooking.first_name,\r\n              lastName: primaryBooking.last_name,\r\n              memberId: primaryBooking.member_display_id,\r\n              playerNames: allPlayerNames\r\n            }\r\n          });\r\n        } else {\r\n          // This time slot is available\r\n          allTimes.push({\r\n            id: `${course}-${date}-${timeStr}`,\r\n            courseId: course,\r\n            courseName: courseNames[course as keyof typeof courseNames] || course,\r\n            date: date,\r\n            time: timeStr,\r\n            players: 0,\r\n            maxPlayers: maxPlayers,\r\n            price: basePrice,\r\n            status: 'available'\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return new Response(JSON.stringify(allTimes), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (error) {\r\n    console.error('Available times API error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n", "import { Env, DiningReservation, DiningReservationRequest } from '../../types';\r\nimport { verifyAuth } from '../auth/utils';\r\n\r\nexport const onRequest: PagesFunction<Env> = async (context) => {\r\n  const { request, env } = context;\r\n  const method = request.method;\r\n\r\n  try {\r\n    if (method === 'GET') {\r\n      return handleGetReservations(request, env);\r\n    } else if (method === 'POST') {\r\n      return handleCreateReservation(request, env);\r\n    } else if (method === 'DELETE') {\r\n      return handleDeleteReservation(request, env);\r\n    }\r\n\r\n    return new Response('Method not allowed', { status: 405 });\r\n  } catch (error) {\r\n    console.error('Dining reservations API error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function handleGetReservations(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const stmt = env.DB.prepare(`\r\n    SELECT * FROM dining_reservations \r\n    WHERE member_id = ? AND status = 'confirmed'\r\n    ORDER BY date ASC, time ASC\r\n  `);\r\n  \r\n  const result = await stmt.bind(member.id).all();\r\n\r\n  return new Response(JSON.stringify({ reservations: result.results }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n\r\nasync function handleCreateReservation(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const body: DiningReservationRequest = await request.json();\r\n  \r\n  if (!body.date || !body.time || !body.partySize) {\r\n    return new Response(JSON.stringify({ error: 'Missing required fields' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Check for existing reservation at the same time (simple conflict check)\r\n  const conflictCheck = env.DB.prepare(`\r\n    SELECT COUNT(*) as count FROM dining_reservations \r\n    WHERE date = ? AND time = ? AND status = 'confirmed'\r\n  `);\r\n  const existingCount = await conflictCheck.bind(body.date, body.time).first();\r\n\r\n  // Allow up to 5 reservations per time slot\r\n  if (existingCount && existingCount.count >= 5) {\r\n    return new Response(JSON.stringify({ error: 'No availability at this time' }), {\r\n      status: 409,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const stmt = env.DB.prepare(`\r\n    INSERT INTO dining_reservations (member_id, date, time, party_size, special_requests)\r\n    VALUES (?, ?, ?, ?, ?)\r\n  `);\r\n\r\n  const result = await stmt.bind(\r\n    member.id,\r\n    body.date,\r\n    body.time,\r\n    body.partySize,\r\n    body.specialRequests || null\r\n  ).run();\r\n\r\n  if (result.success) {\r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      id: result.meta.last_row_id,\r\n      message: 'Dining reservation created successfully'\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Failed to create reservation' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleDeleteReservation(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const url = new URL(request.url);\r\n  const reservationId = url.searchParams.get('id');\r\n\r\n  if (!reservationId) {\r\n    return new Response(JSON.stringify({ error: 'Reservation ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE dining_reservations SET status = 'cancelled', updated_at = CURRENT_TIMESTAMP \r\n    WHERE id = ? AND member_id = ?\r\n  `);\r\n  \r\n  const result = await stmt.bind(reservationId, member.id).run();\r\n\r\n  if (result.success && result.meta.changes > 0) {\r\n    return new Response(JSON.stringify({ \r\n      success: true,\r\n      message: 'Reservation cancelled successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Reservation not found or unauthorized' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n", "import { Env, Event, EventRegistration } from '../../types';\r\nimport { verifyAuth } from '../auth/utils';\r\n\r\nexport const onRequest: PagesFunction<Env> = async (context) => {\r\n  const { request, env } = context;\r\n  const method = request.method;\r\n\r\n  try {\r\n    if (method === 'GET') {\r\n      return handleGetEvents(request, env);\r\n    } else if (method === 'POST') {\r\n      return handleRegisterForEvent(request, env);\r\n    } else if (method === 'DELETE') {\r\n      return handleUnregisterFromEvent(request, env);\r\n    }\r\n\r\n    return new Response('Method not allowed', { status: 405 });\r\n  } catch (error) {\r\n    console.error('Events API error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function handleGetEvents(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Get all active events with registration status\r\n  const stmt = env.DB.prepare(`\r\n    SELECT \r\n      e.*,\r\n      CASE WHEN er.member_id IS NOT NULL THEN 1 ELSE 0 END as is_registered,\r\n      COUNT(er2.id) as registered_count\r\n    FROM events e\r\n    LEFT JOIN event_registrations er ON e.id = er.event_id AND er.member_id = ? AND er.status = 'registered'\r\n    LEFT JOIN event_registrations er2 ON e.id = er2.event_id AND er2.status = 'registered'\r\n    WHERE e.status = 'active' AND e.date >= DATE('now')\r\n    GROUP BY e.id\r\n    ORDER BY e.date ASC, e.time ASC\r\n  `);\r\n  \r\n  const result = await stmt.bind(member.id).all();\r\n\r\n  return new Response(JSON.stringify({ events: result.results }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n\r\nasync function handleRegisterForEvent(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const body = await request.json();\r\n  const eventId = body.eventId;\r\n  \r\n  if (!eventId) {\r\n    return new Response(JSON.stringify({ error: 'Event ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Check if event exists and is active\r\n  const eventStmt = env.DB.prepare(`\r\n    SELECT * FROM events WHERE id = ? AND status = 'active' AND date >= DATE('now')\r\n  `);\r\n  const event = await eventStmt.bind(eventId).first();\r\n\r\n  if (!event) {\r\n    return new Response(JSON.stringify({ error: 'Event not found or not available' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Check if already registered\r\n  const existingStmt = env.DB.prepare(`\r\n    SELECT id FROM event_registrations \r\n    WHERE event_id = ? AND member_id = ? AND status = 'registered'\r\n  `);\r\n  const existing = await existingStmt.bind(eventId, member.id).first();\r\n\r\n  if (existing) {\r\n    return new Response(JSON.stringify({ error: 'Already registered for this event' }), {\r\n      status: 409,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Check capacity if max_attendees is set\r\n  if (event.max_attendees) {\r\n    const countStmt = env.DB.prepare(`\r\n      SELECT COUNT(*) as count FROM event_registrations \r\n      WHERE event_id = ? AND status = 'registered'\r\n    `);\r\n    const countResult = await countStmt.bind(eventId).first();\r\n    \r\n    if (countResult && countResult.count >= event.max_attendees) {\r\n      return new Response(JSON.stringify({ error: 'Event is full' }), {\r\n        status: 409,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Register for the event\r\n  const stmt = env.DB.prepare(`\r\n    INSERT INTO event_registrations (event_id, member_id)\r\n    VALUES (?, ?)\r\n  `);\r\n\r\n  const result = await stmt.bind(eventId, member.id).run();\r\n\r\n  if (result.success) {\r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      message: 'Successfully registered for event'\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Failed to register for event' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleUnregisterFromEvent(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const url = new URL(request.url);\r\n  const eventId = url.searchParams.get('eventId');\r\n\r\n  if (!eventId) {\r\n    return new Response(JSON.stringify({ error: 'Event ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE event_registrations SET status = 'cancelled' \r\n    WHERE event_id = ? AND member_id = ? AND status = 'registered'\r\n  `);\r\n  \r\n  const result = await stmt.bind(eventId, member.id).run();\r\n\r\n  if (result.success && result.meta.changes > 0) {\r\n    return new Response(JSON.stringify({ \r\n      success: true,\r\n      message: 'Successfully unregistered from event'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Registration not found' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n", "import { Env, GuestPass, GuestPassRequest } from '../../types';\r\nimport { verifyAuth } from '../auth/utils';\r\n\r\nexport const onRequest: PagesFunction<Env> = async (context) => {\r\n  const { request, env } = context;\r\n  const method = request.method;\r\n\r\n  try {\r\n    if (method === 'GET') {\r\n      return handleGetGuestPasses(request, env);\r\n    } else if (method === 'POST') {\r\n      return handleCreateGuestPass(request, env);\r\n    } else if (method === 'DELETE') {\r\n      return handleRevokeGuestPass(request, env);\r\n    }\r\n\r\n    return new Response('Method not allowed', { status: 405 });\r\n  } catch (error) {\r\n    console.error('Guest passes API error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function handleGetGuestPasses(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const stmt = env.DB.prepare(`\r\n    SELECT * FROM guest_passes \r\n    WHERE member_id = ? AND status = 'active' AND expires_at > CURRENT_TIMESTAMP\r\n    ORDER BY visit_date ASC\r\n  `);\r\n  \r\n  const result = await stmt.bind(member.id).all();\r\n\r\n  return new Response(JSON.stringify({ guestPasses: result.results }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n\r\nasync function handleCreateGuestPass(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const body: GuestPassRequest = await request.json();\r\n  \r\n  if (!body.guestName || !body.visitDate) {\r\n    return new Response(JSON.stringify({ error: 'Guest name and visit date are required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Generate unique pass code\r\n  const passCode = await generatePassCode();\r\n  const expiresAt = new Date(new Date(body.visitDate).getTime() + 24 * 60 * 60 * 1000); // Expires 24 hours after visit date\r\n\r\n  const stmt = env.DB.prepare(`\r\n    INSERT INTO guest_passes (member_id, guest_name, guest_email, visit_date, pass_code, expires_at)\r\n    VALUES (?, ?, ?, ?, ?, ?)\r\n  `);\r\n\r\n  const result = await stmt.bind(\r\n    member.id,\r\n    body.guestName,\r\n    body.guestEmail || null,\r\n    body.visitDate,\r\n    passCode,\r\n    expiresAt.toISOString()\r\n  ).run();\r\n\r\n  if (result.success) {\r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      id: result.meta.last_row_id,\r\n      passCode,\r\n      message: 'Guest pass created successfully'\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Failed to create guest pass' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleRevokeGuestPass(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const url = new URL(request.url);\r\n  const passId = url.searchParams.get('id');\r\n\r\n  if (!passId) {\r\n    return new Response(JSON.stringify({ error: 'Pass ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE guest_passes SET status = 'revoked' \r\n    WHERE id = ? AND member_id = ?\r\n  `);\r\n  \r\n  const result = await stmt.bind(passId, member.id).run();\r\n\r\n  if (result.success && result.meta.changes > 0) {\r\n    return new Response(JSON.stringify({ \r\n      success: true,\r\n      message: 'Guest pass revoked successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Guest pass not found or unauthorized' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function generatePassCode(): Promise<string> {\r\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n  let result = '';\r\n  for (let i = 0; i < 8; i++) {\r\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n  }\r\n  return result;\r\n}\r\n", "import { Env, TeeTime, TeeTimeRequest } from '../../types';\r\nimport { verifyAuth } from '../auth/utils';\r\n\r\nexport const onRequest: PagesFunction<Env> = async (context) => {\r\n  const { request, env } = context;\r\n  const url = new URL(request.url);\r\n  const method = request.method;\r\n  try {\r\n    if (method === 'GET') {\r\n      return handleGetTeeTimes(request, env);\r\n    } else if (method === 'POST') {\r\n      return handleCreateTeeTime(request, env);\r\n    } else if (method === 'PUT') {\r\n      return handleUpdateTeeTime(request, env);\r\n    } else if (method === 'DELETE') {\r\n      return handleDeleteTeeTime(request, env);\r\n    }\r\n\r\n    return new Response('Method not allowed', { status: 405 });\r\n  } catch (error) {\r\n    console.error('Tee times API error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function handleGetTeeTimes(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  const url = new URL(request.url);\r\n  const startDate = url.searchParams.get('startDate');\r\n  const endDate = url.searchParams.get('endDate');\r\n  let query = `\r\n    SELECT * FROM tee_time_bookings \r\n    WHERE member_id = ? AND status = 'active'\r\n  `;\r\n  let params: any[] = [member.id];\r\n\r\n  if (startDate && endDate) {\r\n    query += ` AND date BETWEEN ? AND ?`;\r\n    params.push(startDate, endDate);\r\n  }\r\n\r\n  query += ` ORDER BY date ASC, time ASC`;\r\n\r\n  const stmt = env.DB.prepare(query);\r\n  const result = await stmt.bind(...params).all();\r\n\r\n  // Map course names and format the response\r\n  const courseNames = {\r\n    'birches': 'The Birches',\r\n    'woods': 'The Woods',\r\n    'farms': 'The Farms'\r\n  };\r\n\r\n  const formattedTeeTimes = result.results?.map((teeTime: any) => ({\r\n    ...teeTime,\r\n    courseName: courseNames[teeTime.course_name as keyof typeof courseNames] || teeTime.course_name\r\n  })) || [];\r\n\r\n  return new Response(JSON.stringify({ teeTimes: formattedTeeTimes }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n\r\nasync function handleCreateTeeTime(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const body: TeeTimeRequest = await request.json();\r\n  \r\n  // Validate required fields\r\n  if (!body.courseId || !body.date || !body.time || !body.players) {\r\n    return new Response(JSON.stringify({ error: 'Missing required fields' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }  // Check if the tee time slot is available or has space for additional players\r\n  const existingCheck = env.DB.prepare(`\r\n    SELECT id, players, allow_additional_players, member_id FROM tee_time_bookings \r\n    WHERE course_name = ? AND date = ? AND time = ? AND status = 'active'\r\n    ORDER BY created_at ASC\r\n  `);\r\n  const existingBookings = await existingCheck.bind(body.courseId, body.date, body.time).all();  if (existingBookings.results && existingBookings.results.length > 0) {\r\n    // Calculate total players across all bookings\r\n    const totalPlayers = existingBookings.results.reduce((sum: number, booking: any) => sum + (booking.players || 1), 0);\r\n    const maxPlayers = 4;\r\n    \r\n    // Check if the first booking allows additional players and there's space\r\n    const firstBooking = existingBookings.results[0];\r\n    if (firstBooking.allow_additional_players && totalPlayers + body.players <= maxPlayers) {\r\n      // Create a new individual booking for this member\r\n      const memberName = `${member.first_name} ${member.last_name}`;\r\n      const stmt = env.DB.prepare(`\r\n        INSERT INTO tee_time_bookings (member_id, course_name, date, time, players, player_names, notes, allow_additional_players)\r\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\r\n      `);\r\n\r\n      const result = await stmt.bind(\r\n        member.id,\r\n        body.courseId,\r\n        body.date,\r\n        body.time,\r\n        body.players,\r\n        memberName,\r\n        body.notes || null,\r\n        body.allowOthersToJoin ? 1 : 0\r\n      ).run();\r\n\r\n      if (result.success) {\r\n        return new Response(JSON.stringify({ \r\n          success: true, \r\n          id: result.meta.last_row_id,\r\n          message: 'Successfully joined the tee time'\r\n        }), {\r\n          status: 201,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }    } else {\r\n      return new Response(JSON.stringify({ error: 'Tee time slot is full or not accepting additional players' }), {\r\n        status: 409,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  }  // Create the tee time booking\r\n  const memberName = `${member.first_name} ${member.last_name}`;\r\n  // Always use the actual number of players, not inflated count\r\n  const playersToBook = body.players;\r\n    const stmt = env.DB.prepare(`\r\n    INSERT INTO tee_time_bookings (member_id, course_name, date, time, players, player_names, notes, allow_additional_players)\r\n    VALUES (?, ?, ?, ?, ?, ?, ?, ?)\r\n  `);\r\n\r\n  const result = await stmt.bind(\r\n    member.id,\r\n    body.courseId,\r\n    body.date,\r\n    body.time,\r\n    playersToBook,\r\n    memberName,\r\n    body.notes || null,\r\n    body.allowOthersToJoin ? 1 : 0\r\n  ).run();\r\n\r\n  if (result.success) {\r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      id: result.meta.last_row_id,\r\n      message: 'Tee time booked successfully'\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Failed to create tee time' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleUpdateTeeTime(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const url = new URL(request.url);\r\n  const teeTimeId = url.searchParams.get('id');\r\n\r\n  if (!teeTimeId) {\r\n    return new Response(JSON.stringify({ error: 'Tee time ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const body = await request.json();\r\n\r\n  // Validate input\r\n  if (!body.players || body.players < 1 || body.players > 4) {\r\n    return new Response(JSON.stringify({ error: 'Players must be between 1 and 4' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }  // Verify the tee time booking belongs to the member\r\n  const verifyStmt = env.DB.prepare(`\r\n    SELECT id, players, course_name, date, time FROM tee_time_bookings WHERE id = ? AND member_id = ?\r\n  `);\r\n  const teeTime = await verifyStmt.bind(teeTimeId, member.id).first();\r\n\r\n  if (!teeTime) {\r\n    return new Response(JSON.stringify({ error: 'Tee time booking not found or access denied' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Check if the updated player count would exceed the 4-player limit\r\n  if (body.players !== teeTime.players) {\r\n    const capacityCheck = env.DB.prepare(`\r\n      SELECT SUM(players) as total_players FROM tee_time_bookings \r\n      WHERE course_name = ? AND date = ? AND time = ? AND status = 'active' AND id != ?\r\n    `);\r\n    const capacityResult = await capacityCheck.bind(teeTime.course_name, teeTime.date, teeTime.time, teeTimeId).first();\r\n    const otherPlayersCount = capacityResult?.total_players || 0;\r\n\r\n    if (otherPlayersCount + body.players > 4) {\r\n      const maxAllowed = 4 - otherPlayersCount;\r\n      return new Response(JSON.stringify({ \r\n        error: `This would exceed the 4-player limit. Maximum ${maxAllowed} player${maxAllowed !== 1 ? 's' : ''} allowed for this booking.` \r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  }  // Update the tee time booking\r\n  let playerNames: string | null = null;\r\n  \r\n  // If player count changed, update player names\r\n  if (body.players !== teeTime.players) {\r\n    // Get member name for player names generation\r\n    const memberQuery = env.DB.prepare(`\r\n      SELECT first_name, last_name FROM members WHERE id = ?\r\n    `);\r\n    const memberResult = await memberQuery.bind(member.id).first();\r\n    \r\n    if (memberResult) {\r\n      const memberName = `${memberResult.first_name} ${memberResult.last_name}`;\r\n      \r\n      if (body.players === 1) {\r\n        playerNames = memberName;\r\n      } else {\r\n        const guestNames = Array(body.players - 1).fill(null).map((_, i) => `Guest ${i + 1}`);\r\n        playerNames = [memberName, ...guestNames].join(', ');\r\n      }\r\n    }\r\n  }\r\n\r\n  const updateStmt = env.DB.prepare(`\r\n    UPDATE tee_time_bookings \r\n    SET players = ?, \r\n        player_names = COALESCE(?, player_names),\r\n        allow_additional_players = ?,\r\n        updated_at = CURRENT_TIMESTAMP\r\n    WHERE id = ?\r\n  `);\r\n\r\n  const result = await updateStmt.bind(\r\n    body.players,\r\n    playerNames,\r\n    body.allowOthersToJoin ? 1 : 0,\r\n    teeTimeId\r\n  ).run();\r\n\r\n  if (result.success) {\r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      message: 'Tee time updated successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Failed to update tee time' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleDeleteTeeTime(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const url = new URL(request.url);\r\n  const teeTimeId = url.searchParams.get('id');\r\n\r\n  if (!teeTimeId) {\r\n    return new Response(JSON.stringify({ error: 'Tee time ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  // Verify the tee time booking belongs to the member\r\n  const verifyStmt = env.DB.prepare(`\r\n    SELECT id FROM tee_time_bookings WHERE id = ? AND member_id = ?\r\n  `);\r\n  const teeTime = await verifyStmt.bind(teeTimeId, member.id).first();\r\n\r\n  if (!teeTime) {\r\n    return new Response(JSON.stringify({ error: 'Tee time booking not found or unauthorized' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Cancel the tee time booking (soft delete)\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE tee_time_bookings SET status = 'cancelled', updated_at = CURRENT_TIMESTAMP \r\n    WHERE id = ?\r\n  `);\r\n  \r\n  const result = await stmt.bind(teeTimeId).run();\r\n\r\n  if (result.success) {\r\n    return new Response(JSON.stringify({ \r\n      success: true,\r\n      message: 'Tee time cancelled successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Failed to cancel tee time' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n", "import { Env, CourtReservation, CourtReservationRequest } from '../../types';\r\nimport { verifyAuth } from '../auth/utils';\r\n\r\nexport const onRequest: PagesFunction<Env> = async (context) => {\r\n  const { request, env } = context;\r\n  const url = new URL(request.url);\r\n  const method = request.method;\r\n\r\n  try {\r\n    if (method === 'GET') {\r\n      return handleGetCourtReservations(request, env);\r\n    } else if (method === 'POST') {\r\n      return handleCreateCourtReservation(request, env);\r\n    } else if (method === 'DELETE') {\r\n      return handleDeleteCourtReservation(request, env);\r\n    }\r\n\r\n    return new Response('Method not allowed', { status: 405 });\r\n  } catch (error) {\r\n    console.error('Tennis courts API error:', error);\r\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n};\r\n\r\nasync function handleGetCourtReservations(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  const url = new URL(request.url);\r\n  const startDate = url.searchParams.get('startDate');\r\n  const endDate = url.searchParams.get('endDate');\r\n  const courtType = url.searchParams.get('courtType');\r\n  \r\n  let query = `\r\n    SELECT * FROM court_reservations \r\n    WHERE member_id = ? AND status = 'active'\r\n  `;\r\n  let params: any[] = [member.id];\r\n\r\n  // Only filter by court type if specified\r\n  if (courtType) {\r\n    query += ` AND court_type = ?`;\r\n    params.push(courtType);\r\n  }\r\n\r\n  if (startDate && endDate) {\r\n    query += ` AND date BETWEEN ? AND ?`;\r\n    params.push(startDate, endDate);\r\n  }\r\n\r\n  query += ` ORDER BY date ASC, time ASC`;\r\n\r\n  const stmt = env.DB.prepare(query);\r\n  const result = await stmt.bind(...params).all();\r\n\r\n  return new Response(JSON.stringify({ reservations: result.results || [] }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n\r\nasync function handleCreateCourtReservation(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const body: CourtReservationRequest = await request.json();\r\n  \r\n  // Validate required fields\r\n  if (!body.courtType || !body.date || !body.time || !body.duration) {\r\n    return new Response(JSON.stringify({ error: 'Missing required fields' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Validate court type\r\n  if (!['tennis', 'pickleball'].includes(body.courtType)) {\r\n    return new Response(JSON.stringify({ error: 'Invalid court type' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Auto-assign court if not specified\r\n  let courtNumber = body.courtNumber;\r\n  if (!courtNumber) {\r\n    const maxCourts = body.courtType === 'tennis' ? 9 : 4;    // Find available court\r\n    for (let i = 1; i <= maxCourts; i++) {\r\n      const conflictCheck = env.DB.prepare(`\r\n        SELECT id, time, duration FROM court_reservations \r\n        WHERE court_type = ? AND court_number = ? AND date = ? AND status = 'active'\r\n      `);\r\n      \r\n      const existingReservations = await conflictCheck.bind(\r\n        body.courtType, \r\n        i, \r\n        body.date\r\n      ).all();\r\n      \r\n      const newStartTime = new Date(`2000-01-01T${body.time}`);\r\n      const newEndTime = new Date(newStartTime.getTime() + body.duration * 60000);\r\n      \r\n      let hasConflict = false;\r\n      for (const reservation of existingReservations.results || []) {\r\n        const existingStartTime = new Date(`2000-01-01T${reservation.time}`);\r\n        const existingEndTime = new Date(existingStartTime.getTime() + reservation.duration * 60000);\r\n        \r\n        // Check for overlap\r\n        if (newStartTime < existingEndTime && newEndTime > existingStartTime) {\r\n          hasConflict = true;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      if (!hasConflict) {\r\n        courtNumber = i;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (!courtNumber) {\r\n      return new Response(JSON.stringify({ error: 'No courts available at the requested time' }), {\r\n        status: 409,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n  } else {    // Check if specified court is available\r\n    const conflictCheck = env.DB.prepare(`\r\n      SELECT id, time, duration FROM court_reservations \r\n      WHERE court_type = ? AND court_number = ? AND date = ? AND status = 'active'\r\n    `);\r\n    \r\n    const existingReservations = await conflictCheck.bind(\r\n      body.courtType, \r\n      courtNumber, \r\n      body.date\r\n    ).all();\r\n    \r\n    const newStartTime = new Date(`2000-01-01T${body.time}`);\r\n    const newEndTime = new Date(newStartTime.getTime() + body.duration * 60000);\r\n    \r\n    for (const reservation of existingReservations.results || []) {\r\n      const existingStartTime = new Date(`2000-01-01T${reservation.time}`);\r\n      const existingEndTime = new Date(existingStartTime.getTime() + reservation.duration * 60000);\r\n      \r\n      // Check for overlap\r\n      if (newStartTime < existingEndTime && newEndTime > existingStartTime) {\r\n        return new Response(JSON.stringify({ error: 'Selected court is not available at the requested time' }), {\r\n          status: 409,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Create the reservation\r\n  const stmt = env.DB.prepare(`\r\n    INSERT INTO court_reservations (member_id, court_type, court_number, date, time, duration, notes)\r\n    VALUES (?, ?, ?, ?, ?, ?, ?)\r\n  `);\r\n\r\n  const result = await stmt.bind(\r\n    member.id,\r\n    body.courtType,\r\n    courtNumber,\r\n    body.date,\r\n    body.time,\r\n    body.duration,\r\n    body.notes || null\r\n  ).run();\r\n\r\n  if (result.success) {\r\n    return new Response(JSON.stringify({ \r\n      success: true, \r\n      id: result.meta.last_row_id,\r\n      courtNumber,\r\n      message: `${body.courtType === 'tennis' ? 'Tennis' : 'Pickleball'} court ${courtNumber} reserved successfully`\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Failed to create reservation' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleDeleteCourtReservation(request: Request, env: Env) {\r\n  const member = await verifyAuth(request, env);\r\n  if (!member) {\r\n    return new Response(JSON.stringify({ error: 'Unauthorized' }), {\r\n      status: 401,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  const url = new URL(request.url);\r\n  const reservationId = url.searchParams.get('id');\r\n\r\n  if (!reservationId) {\r\n    return new Response(JSON.stringify({ error: 'Reservation ID required' }), {\r\n      status: 400,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Verify the reservation belongs to the member\r\n  const verifyStmt = env.DB.prepare(`\r\n    SELECT id FROM court_reservations WHERE id = ? AND member_id = ?\r\n  `);\r\n  const reservation = await verifyStmt.bind(reservationId, member.id).first();\r\n\r\n  if (!reservation) {\r\n    return new Response(JSON.stringify({ error: 'Reservation not found or unauthorized' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  // Cancel the reservation (soft delete)\r\n  const stmt = env.DB.prepare(`\r\n    UPDATE court_reservations SET status = 'cancelled', updated_at = CURRENT_TIMESTAMP \r\n    WHERE id = ?\r\n  `);\r\n  \r\n  const result = await stmt.bind(reservationId).run();\r\n\r\n  if (result.success) {\r\n    return new Response(JSON.stringify({ \r\n      success: true,\r\n      message: 'Court reservation cancelled successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } else {\r\n    return new Response(JSON.stringify({ error: 'Failed to cancel reservation' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n", "import { onRequestPost as __api_admin_auth_login_ts_onRequestPost } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\admin\\\\auth\\\\login.ts\"\nimport { onRequestPost as __api_admin_auth_logout_ts_onRequestPost } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\admin\\\\auth\\\\logout.ts\"\nimport { onRequestGet as __api_admin_auth_me_ts_onRequestGet } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\admin\\\\auth\\\\me.ts\"\nimport { onRequestPost as __api_auth_login_ts_onRequestPost } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\auth\\\\login.ts\"\nimport { onRequestPost as __api_auth_logout_ts_onRequestPost } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\auth\\\\logout.ts\"\nimport { onRequestGet as __api_auth_me_ts_onRequestGet } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\auth\\\\me.ts\"\nimport { onRequestPost as __api_auth_register_ts_onRequestPost } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\auth\\\\register.ts\"\nimport { onRequest as __api_admin_dining_index_ts_onRequest } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\admin\\\\dining\\\\index.ts\"\nimport { onRequest as __api_admin_events_index_ts_onRequest } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\admin\\\\events\\\\index.ts\"\nimport { onRequest as __api_admin_members_index_ts_onRequest } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\admin\\\\members\\\\index.ts\"\nimport { onRequest as __api_admin_tee_times_index_ts_onRequest } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\admin\\\\tee-times\\\\index.ts\"\nimport { onRequest as __api_admin_tennis_courts_index_ts_onRequest } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\admin\\\\tennis-courts\\\\index.ts\"\nimport { onRequest as __api_tee_times_available_ts_onRequest } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\tee-times\\\\available.ts\"\nimport { onRequest as __api_dining_index_ts_onRequest } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\dining\\\\index.ts\"\nimport { onRequest as __api_events_index_ts_onRequest } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\events\\\\index.ts\"\nimport { onRequest as __api_guest_passes_index_ts_onRequest } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\guest-passes\\\\index.ts\"\nimport { onRequest as __api_tee_times_index_ts_onRequest } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\tee-times\\\\index.ts\"\nimport { onRequest as __api_tennis_courts_index_ts_onRequest } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\functions\\\\api\\\\tennis-courts\\\\index.ts\"\n\nexport const routes = [\n    {\n      routePath: \"/api/admin/auth/login\",\n      mountPath: \"/api/admin/auth\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_auth_login_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/auth/logout\",\n      mountPath: \"/api/admin/auth\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_auth_logout_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/auth/me\",\n      mountPath: \"/api/admin/auth\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_auth_me_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/login\",\n      mountPath: \"/api/auth\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_auth_login_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/auth/logout\",\n      mountPath: \"/api/auth\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_auth_logout_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/auth/me\",\n      mountPath: \"/api/auth\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_me_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/register\",\n      mountPath: \"/api/auth\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_auth_register_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/dining\",\n      mountPath: \"/api/admin/dining\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_admin_dining_index_ts_onRequest],\n    },\n  {\n      routePath: \"/api/admin/events\",\n      mountPath: \"/api/admin/events\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_admin_events_index_ts_onRequest],\n    },\n  {\n      routePath: \"/api/admin/members\",\n      mountPath: \"/api/admin/members\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_admin_members_index_ts_onRequest],\n    },\n  {\n      routePath: \"/api/admin/tee-times\",\n      mountPath: \"/api/admin/tee-times\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_admin_tee_times_index_ts_onRequest],\n    },\n  {\n      routePath: \"/api/admin/tennis-courts\",\n      mountPath: \"/api/admin/tennis-courts\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_admin_tennis_courts_index_ts_onRequest],\n    },\n  {\n      routePath: \"/api/tee-times/available\",\n      mountPath: \"/api/tee-times\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_tee_times_available_ts_onRequest],\n    },\n  {\n      routePath: \"/api/dining\",\n      mountPath: \"/api/dining\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_dining_index_ts_onRequest],\n    },\n  {\n      routePath: \"/api/events\",\n      mountPath: \"/api/events\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_events_index_ts_onRequest],\n    },\n  {\n      routePath: \"/api/guest-passes\",\n      mountPath: \"/api/guest-passes\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_guest_passes_index_ts_onRequest],\n    },\n  {\n      routePath: \"/api/tee-times\",\n      mountPath: \"/api/tee-times\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_tee_times_index_ts_onRequest],\n    },\n  {\n      routePath: \"/api/tennis-courts\",\n      mountPath: \"/api/tennis-courts\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_tennis_courts_index_ts_onRequest],\n    },\n  ]", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\gavin\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\gavin\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\gavin\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\gavin\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\pages-template-worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\.wrangler\\\\tmp\\\\bundle-I3dNHM\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\gavin\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\.wrangler\\\\tmp\\\\bundle-I3dNHM\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\.wrangler\\\\tmp\\\\bundle-I3dNHM\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\.wrangler\\\\tmp\\\\pages-KkvrO9\\\\functionsWorker-0.0643311894480092.mjs\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\gavin\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\gavin\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\.wrangler\\\\tmp\\\\pages-KkvrO9\\\\functionsWorker-0.0643311894480092.mjs\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\.wrangler\\\\tmp\\\\bundle-Pu1wQW\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\gavin\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\.wrangler\\\\tmp\\\\bundle-Pu1wQW\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\gavin\\\\OneDrive\\\\Documents\\\\Github\\\\BirchwoodCC\\\\.wrangler\\\\tmp\\\\bundle-Pu1wQW\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["urls", "checkURL", "__name", "onRequestPost", "parseCookies", "createSessionToken", "onRequestGet", "hashPassword", "verifyAdminAuth", "onRequest", "generateMemberId", "handleCreateReservation", "handleDeleteReservation", "handleCreateTeeTime", "handleUpdateTeeTime", "handleDeleteTeeTime", "memberName", "stmt", "result", "handleGetCourtReservations", "handleCreateCourtReservation", "handleDeleteCourtReservation", "value", "_a", "char", "prefix", "i", "drainBody", "middleware_ensure_req_body_drained_default", "reduceError", "jsonError", "middleware_miniflare3_json_error_default", "__INTERNAL_WRANGLER_MIDDLEWARE__", "middleware_ensure_req_body_drained_default", "middleware_miniflare3_json_error_default", "middleware_insertion_facade_default", "__facade_middleware__", "__facade_register__", "__facade_invokeChain__", "__facade_invoke__", "__facade_middleware__", "__Facade_ScheduledController__", "___Facade_ScheduledController__", "wrapExportedHandler", "__INTERNAL_WRANGLER_MIDDLEWARE__", "__facade_register__", "__facade_invoke__", "wrapWorkerEntrypoint", "WRAPPED_ENTRY", "middleware_insertion_facade_default", "middleware_loader_entry_default"]
}
